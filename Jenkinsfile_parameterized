#!groovy

properties([
        [
                $class: 'GithubProjectProperty',
                displayName: 'Evidence Annotation App',
                projectUrlStr: 'https://github.com/hmcts/rpa-em-annotation-api'
        ],
        pipelineTriggers([
                [$class: 'GitHubPushTrigger']
        ]),
        parameters([
                choice(name: 'ENVIRONMENT', choices: 'saat\nsprod\nsandbox', description: 'Environment where code should be build and deployed')
        ]),
])

@Library("Infrastructure")

def type = "java"
def product = "em"
def component = "anno"
def channel = '#rpa-pipeline'

def secrets = [
        's2s-${env}': [
                secret('microservicekey-em-gw', 'FUNCTIONAL_TEST_CLIENT_S2S_TOKEN')
        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

def vaultOverrides = [
        'preview' : 'aat',
        'spreview': 'saat'
]

// Vars needed for AKS testing - keep values in sync with: /src/kubernetes/deployment.template.yaml
// THESE WILL BE OVERWRITTEN IN ASE DEPLOYMENTS WITH TERRAFORM OUTPUTS.TF
// THESE CAN BE PICKED UP IN INTEGRATION-TEST CODE DIRECTLY
env.IDAM_API_URL = 'https://preprod-idamapi.reform.hmcts.net:3511'
env.S2S_URL = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'

withParameterizedPipeline(type, product, component, params.ENVIRONMENT, 'sandbox') {
    enableSlackNotifications(channel)

//    enablePerformanceTest(15)
//    enableApiGatewayTest(15)
//    enableFullFunctionalTest(30)
//    enableMutationTest(120)
//    enableCrossBrowserTest(120)
    enableDockerBuild()
    enableDeployToAKS()
    overrideVaultEnvironments(vaultOverrides)
    loadVaultSecrets(secrets)


    after('checkout') {
        echo '${product}-${component} out'
        sh '''
mkdir -p application/src/main/resources/META-INF
echo "allprojects { task printVersionInit { doLast { println project.version } } }" > init.gradle

tee application/src/main/resources/META-INF/build-info.properties <<EOF 2>/dev/null
build.version=$(./gradlew -q printVersion)
build.number=${BUILD_NUMBER}
build.commit=$(git rev-parse HEAD)
build.date=$(date)
EOF

'''
    }

}
