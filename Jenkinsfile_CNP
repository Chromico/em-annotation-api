#!groovy

properties([
    [
        $class: 'GithubProjectProperty',
        displayName: 'Evidence Annotation App',
        projectUrlStr: 'https://github.com/hmcts/rpa-em-annotation-api'
    ],
    pipelineTriggers([
        [$class: 'GitHubPushTrigger']
    ])
])

@Library("Infrastructure")

def type = "java"
def product = "em"
def component = "anno"
def vault = "rpa"
def channel = '#rpa-pipeline'

List<LinkedHashMap<String, Object>> secrets = [
    secret('em-s2s-token', 'S2S_TOKEN'),
    secret('AppInsightsInstrumentationKey', 'APPINSIGHTS_INSTRUMENTATIONKEY'),
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

// Vars needed for AKS testing - keep values in sync with: /src/kubernetes/deployment.template.yaml
// THESE WILL BE OVERWRITTEN IN ASE DEPLOYMENTS WITH TERRAFORM OUTPUTS.TF
// THESE CAN BE PICKED UP IN INTEGRATION-TEST CODE DIRECTLY

// 1st option: as it was in Env.java. Also how its stored in output.tf.
env.IDAM_API_URL = 'https://preprod-idamapi.reform.hmcts.net:3511'
env.S2S_URL = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
// 2nd option: as it was in main.tf. However, output.tf changes name to option #1.
//env.IDAM_API_BASE_URI = 'https://preprod-idamapi.reform.hmcts.net:3511'
//env.S2S_BASE_URI = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
// NOTE: CMC-citizen-frontend had IDAM_URL

withPipeline(type, product, component) {
    enableSlackNotifications(channel)

//    enablePerformanceTest(15)
//    enableApiGatewayTest(15)
//    enableFullFunctionalTest(30)
//    enableMutationTest(120)
//    enableCrossBrowserTest(120)
    enableDockerBuild()
    enableDeployToAKS()
    loadVaultSecrets(secrets)
    setVaultName(vault)


    after('checkout') {
        echo '${product}-${component} out'
        sh '''
mkdir -p application/src/main/resources/META-INF
echo "allprojects { task printVersionInit { doLast { println project.version } } }" > init.gradle

tee application/src/main/resources/META-INF/build-info.properties <<EOF 2>/dev/null
build.version=$(./gradlew -q printVersion)
build.number=${BUILD_NUMBER}
build.commit=$(git rev-parse HEAD)
build.date=$(date)
EOF

'''
    }

}
